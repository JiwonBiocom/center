"""
Equipment Management API
장비 관리 및 실시간 가용성 추적 API
"""

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import func, and_, or_, desc
from typing import List, Optional, Dict, Any
from datetime import date, datetime, time

from core.database import get_db
from core.auth import get_current_user
from models.user import User
from models.enhanced_service import EquipmentManagement, ServiceSession
from schemas.enhanced_service import (
    EquipmentManagement as EquipmentManagementSchema,
    EquipmentManagementCreate,
    EquipmentManagementUpdate
)

router = APIRouter()

@router.get("/", response_model=List[EquipmentManagementSchema])
async def list_equipment(
    skip: int = Query(0, ge=0),
    limit: int = Query(50, ge=1, le=100),
    equipment_type: Optional[str] = None,
    is_available: Optional[bool] = None,
    is_maintenance: Optional[bool] = None,
    service_code: Optional[str] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """장비 목록 조회"""
    query = db.query(EquipmentManagement)
    
    # 필터링
    if equipment_type:
        query = query.filter(EquipmentManagement.equipment_type == equipment_type)
    if is_available is not None:
        query = query.filter(EquipmentManagement.is_available == is_available)
    if is_maintenance is not None:
        query = query.filter(EquipmentManagement.is_maintenance == is_maintenance)
    if service_code:
        # JSON 필드에서 서비스 코드 검색
        query = query.filter(
            EquipmentManagement.supported_services.op('->>')('primary') == service_code
        )
    
    query = query.order_by(EquipmentManagement.equipment_code)
    equipment_list = query.offset(skip).limit(limit).all()
    
    return equipment_list

@router.get("/{equipment_id}", response_model=EquipmentManagementSchema)
async def get_equipment(
    equipment_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """특정 장비 조회"""
    equipment = db.query(EquipmentManagement).filter(
        EquipmentManagement.equipment_id == equipment_id
    ).first()
    
    if not equipment:
        raise HTTPException(status_code=404, detail="Equipment not found")
    
    return equipment

@router.post("/", response_model=EquipmentManagementSchema)
async def create_equipment(
    equipment: EquipmentManagementCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """새로운 장비 생성"""
    # 중복 코드 확인
    existing = db.query(EquipmentManagement).filter(
        EquipmentManagement.equipment_code == equipment.equipment_code
    ).first()
    if existing:
        raise HTTPException(status_code=400, detail="Equipment with this code already exists")
    
    db_equipment = EquipmentManagement(**equipment.model_dump())
    db.add(db_equipment)
    db.commit()
    db.refresh(db_equipment)
    
    return db_equipment

@router.patch("/{equipment_id}", response_model=EquipmentManagementSchema)
async def update_equipment(
    equipment_id: int,
    equipment: EquipmentManagementUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """장비 정보 수정"""
    db_equipment = db.query(EquipmentManagement).filter(
        EquipmentManagement.equipment_id == equipment_id
    ).first()
    
    if not db_equipment:
        raise HTTPException(status_code=404, detail="Equipment not found")
    
    update_data = equipment.model_dump(exclude_unset=True)
    for key, value in update_data.items():
        setattr(db_equipment, key, value)
    
    db.commit()
    db.refresh(db_equipment)
    
    return db_equipment

@router.delete("/{equipment_id}")
async def delete_equipment(
    equipment_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """장비 삭제"""
    equipment = db.query(EquipmentManagement).filter(
        EquipmentManagement.equipment_id == equipment_id
    ).first()
    
    if not equipment:
        raise HTTPException(status_code=404, detail="Equipment not found")
    
    # 현재 사용 중인지 확인
    if equipment.current_session_id:
        raise HTTPException(status_code=400, detail="Cannot delete equipment currently in use")
    
    db.delete(equipment)
    db.commit()
    
    return {"detail": "Equipment deleted successfully"}

@router.get("/availability/realtime")
async def get_realtime_availability(
    service_code: Optional[str] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """실시간 장비 가용성 조회"""
    query = db.query(EquipmentManagement)
    
    if service_code:
        query = query.filter(
            EquipmentManagement.supported_services.op('->>')('primary') == service_code
        )
    
    equipment_list = query.all()
    
    availability = {
        "total_equipment": len(equipment_list),
        "available": 0,
        "in_use": 0,
        "maintenance": 0,
        "by_service": {},
        "equipment_details": []
    }
    
    for equipment in equipment_list:
        # 장비 상태 분류
        if equipment.is_maintenance:
            availability["maintenance"] += 1
            status = "maintenance"
        elif equipment.current_session_id:
            availability["in_use"] += 1
            status = "in_use"
        elif equipment.is_available:
            availability["available"] += 1
            status = "available"
        else:
            status = "unavailable"
        
        # 서비스별 집계
        if equipment.supported_services and "primary" in equipment.supported_services:
            service = equipment.supported_services["primary"]
            if service not in availability["by_service"]:
                availability["by_service"][service] = {
                    "total": 0, "available": 0, "in_use": 0, "maintenance": 0
                }
            
            availability["by_service"][service]["total"] += 1
            availability["by_service"][service][status.replace("unavailable", "available")] += 1
        
        # 장비 상세 정보
        availability["equipment_details"].append({
            "equipment_id": equipment.equipment_id,
            "equipment_name": equipment.equipment_name,
            "equipment_code": equipment.equipment_code,
            "equipment_type": equipment.equipment_type,
            "status": status,
            "current_session_id": equipment.current_session_id,
            "supported_services": equipment.supported_services
        })
    
    return availability

@router.post("/{equipment_id}/assign-session")
async def assign_equipment_to_session(
    equipment_id: int,
    session_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """장비를 세션에 할당"""
    equipment = db.query(EquipmentManagement).filter(
        EquipmentManagement.equipment_id == equipment_id
    ).first()
    
    if not equipment:
        raise HTTPException(status_code=404, detail="Equipment not found")
    
    if not equipment.is_available or equipment.is_maintenance:
        raise HTTPException(status_code=400, detail="Equipment not available")
    
    if equipment.current_session_id:
        raise HTTPException(status_code=400, detail="Equipment already assigned to another session")
    
    # 세션 확인
    session = db.query(ServiceSession).filter(ServiceSession.session_id == session_id).first()
    if not session:
        raise HTTPException(status_code=404, detail="Session not found")
    
    # 장비 할당
    equipment.current_session_id = session_id
    db.commit()
    
    return {"detail": "Equipment assigned to session successfully"}

@router.post("/{equipment_id}/release-session")
async def release_equipment_from_session(
    equipment_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """장비를 세션에서 해제"""
    equipment = db.query(EquipmentManagement).filter(
        EquipmentManagement.equipment_id == equipment_id
    ).first()
    
    if not equipment:
        raise HTTPException(status_code=404, detail="Equipment not found")
    
    # 사용 시간 업데이트 (세션 정보 기반)
    if equipment.current_session_id:
        session = db.query(ServiceSession).filter(
            ServiceSession.session_id == equipment.current_session_id
        ).first()
        
        if session and session.duration_minutes:
            # 총 사용 시간에 추가 (분을 시간으로 변환)
            additional_hours = session.duration_minutes / 60.0
            equipment.total_usage_hours = (equipment.total_usage_hours or 0) + additional_hours
    
    # 장비 해제
    equipment.current_session_id = None
    db.commit()
    
    return {"detail": "Equipment released from session successfully"}

@router.post("/{equipment_id}/maintenance")
async def set_equipment_maintenance(
    equipment_id: int,
    is_maintenance: bool,
    maintenance_date: Optional[date] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """장비 정비 상태 설정"""
    equipment = db.query(EquipmentManagement).filter(
        EquipmentManagement.equipment_id == equipment_id
    ).first()
    
    if not equipment:
        raise HTTPException(status_code=404, detail="Equipment not found")
    
    if is_maintenance and equipment.current_session_id:
        raise HTTPException(status_code=400, detail="Cannot set maintenance while equipment is in use")
    
    equipment.is_maintenance = is_maintenance
    
    if is_maintenance:
        equipment.is_available = False
        if maintenance_date:
            equipment.last_maintenance_date = maintenance_date
    else:
        equipment.is_available = True
        # 다음 정비 예정일 계산 (6개월 후)
        if maintenance_date:
            from datetime import timedelta
            equipment.maintenance_due_date = maintenance_date + timedelta(days=180)
    
    db.commit()
    
    return {"detail": f"Equipment maintenance status set to {is_maintenance}"}

@router.get("/stats/usage")
async def get_equipment_usage_stats(
    date_from: Optional[date] = None,
    date_to: Optional[date] = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """장비 사용 통계"""
    equipment_list = db.query(EquipmentManagement).all()
    
    stats = {
        "total_equipment": len(equipment_list),
        "equipment_stats": [],
        "by_type": {},
        "maintenance_due": []
    }
    
    for equipment in equipment_list:
        # 장비별 통계
        equipment_stat = {
            "equipment_id": equipment.equipment_id,
            "equipment_name": equipment.equipment_name,
            "equipment_code": equipment.equipment_code,
            "equipment_type": equipment.equipment_type,
            "total_usage_hours": float(equipment.total_usage_hours or 0),
            "is_available": equipment.is_available,
            "is_maintenance": equipment.is_maintenance,
            "last_maintenance_date": equipment.last_maintenance_date,
            "maintenance_due_date": equipment.maintenance_due_date
        }
        
        # 해당 장비를 사용한 세션 수 계산
        session_count_query = db.query(func.count(ServiceSession.session_id))
        
        if date_from:
            session_count_query = session_count_query.filter(ServiceSession.session_date >= date_from)
        if date_to:
            session_count_query = session_count_query.filter(ServiceSession.session_date <= date_to)
        
        # 장비 설정에서 해당 장비 코드가 포함된 세션들
        # 실제로는 ServiceSession의 equipment_settings JSON에서 검색해야 함
        equipment_stat["session_count"] = 0  # TODO: JSON 쿼리로 구현
        
        stats["equipment_stats"].append(equipment_stat)
        
        # 타입별 집계
        eq_type = equipment.equipment_type
        if eq_type not in stats["by_type"]:
            stats["by_type"][eq_type] = {
                "count": 0,
                "available": 0,
                "maintenance": 0,
                "total_usage_hours": 0
            }
        
        stats["by_type"][eq_type]["count"] += 1
        stats["by_type"][eq_type]["total_usage_hours"] += float(equipment.total_usage_hours or 0)
        
        if equipment.is_maintenance:
            stats["by_type"][eq_type]["maintenance"] += 1
        elif equipment.is_available:
            stats["by_type"][eq_type]["available"] += 1
        
        # 정비 예정 장비
        if equipment.maintenance_due_date:
            from datetime import timedelta
            if equipment.maintenance_due_date <= date.today() + timedelta(days=30):
                stats["maintenance_due"].append({
                    "equipment_id": equipment.equipment_id,
                    "equipment_name": equipment.equipment_name,
                    "maintenance_due_date": equipment.maintenance_due_date,
                    "days_until_due": (equipment.maintenance_due_date - date.today()).days
                })
    
    return stats