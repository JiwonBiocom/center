"""
Enhanced Service Schemas for Multi-Service Session Management
새로운 PRD 요구사항에 맞는 확장된 서비스 관리 스키마
"""

from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime, date, time
from decimal import Decimal

# 확장된 서비스 타입 스키마
class EnhancedServiceTypeBase(BaseModel):
    name: str = Field(..., description="서비스명")
    code: str = Field(..., description="서비스 코드")
    description: Optional[str] = Field(None, description="서비스 설명")
    default_duration: int = Field(30, description="기본 소요시간(분)")
    default_price: Decimal = Field(..., description="기본 가격")
    equipment_required: Optional[Dict[str, Any]] = Field(None, description="필요한 장비 정보")
    protocols: Optional[Dict[str, Any]] = Field(None, description="표준 프로토콜들")
    intensity_levels: Optional[Dict[str, Any]] = Field(None, description="강도 레벨 설정")
    is_active: bool = Field(True, description="활성 상태")
    sort_order: int = Field(0, description="정렬 순서")

class EnhancedServiceTypeCreate(EnhancedServiceTypeBase):
    pass

class EnhancedServiceTypeUpdate(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    default_duration: Optional[int] = None
    default_price: Optional[Decimal] = None
    equipment_required: Optional[Dict[str, Any]] = None
    protocols: Optional[Dict[str, Any]] = None
    intensity_levels: Optional[Dict[str, Any]] = None
    is_active: Optional[bool] = None
    sort_order: Optional[int] = None

class EnhancedServiceType(EnhancedServiceTypeBase):
    service_type_id: int
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

# 서비스 세션 스키마
class ServiceSessionBase(BaseModel):
    customer_id: int = Field(..., description="고객 ID")
    service_type_id: int = Field(..., description="서비스 타입 ID")
    package_usage_id: Optional[int] = Field(None, description="패키지 사용 ID")
    session_date: date = Field(..., description="세션 날짜")
    start_time: time = Field(..., description="시작 시간")
    end_time: Optional[time] = Field(None, description="종료 시간")
    duration_minutes: int = Field(..., description="지속 시간(분)")
    equipment_settings: Optional[Dict[str, Any]] = Field(None, description="장비 설정")
    protocol_used: Optional[str] = Field(None, description="사용된 프로토콜")
    intensity_level: Optional[str] = Field(None, description="강도 레벨")
    session_notes: Optional[str] = Field(None, description="세션 중 특이사항")
    customer_condition: Optional[str] = Field(None, description="고객 컨디션")
    staff_notes: Optional[str] = Field(None, description="직원 코멘트")
    customer_feedback: Optional[str] = Field(None, description="고객 피드백")
    is_completed: bool = Field(False, description="완료 여부")
    is_partial: bool = Field(False, description="중간에 중단된 세션")
    completion_rate: int = Field(100, description="완료율 (%)")
    conducted_by: Optional[int] = Field(None, description="담당 직원 ID")
    reservation_id: Optional[int] = Field(None, description="연결된 예약 ID")

class ServiceSessionCreate(ServiceSessionBase):
    pass

class ServiceSessionUpdate(BaseModel):
    end_time: Optional[time] = None
    equipment_settings: Optional[Dict[str, Any]] = None
    protocol_used: Optional[str] = None
    intensity_level: Optional[str] = None
    session_notes: Optional[str] = None
    customer_condition: Optional[str] = None
    staff_notes: Optional[str] = None
    customer_feedback: Optional[str] = None
    is_completed: Optional[bool] = None
    is_partial: Optional[bool] = None
    completion_rate: Optional[int] = None

class ServiceSession(ServiceSessionBase):
    session_id: int
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

class ServiceSessionWithDetails(ServiceSession):
    customer_name: Optional[str] = None
    service_name: Optional[str] = None
    conducted_by_name: Optional[str] = None

# 확장된 패키지 사용량 스키마
class EnhancedPackageUsageBase(BaseModel):
    customer_id: int = Field(..., description="고객 ID")
    package_id: int = Field(..., description="패키지 ID")
    purchase_date: date = Field(..., description="구매일")
    valid_until: date = Field(..., description="유효기간")
    total_amount: Decimal = Field(..., description="총 결제 금액")
    
    # 서비스별 할당량
    brain_total: int = Field(0, description="브레인 총 횟수")
    pulse_total: int = Field(0, description="펄스 총 횟수")
    lymph_total: int = Field(0, description="림프 총 횟수")
    red_total: int = Field(0, description="레드 총 횟수")
    ai_bike_total: int = Field(0, description="AI바이크 총 횟수")
    
    status: str = Field("active", description="상태")
    auto_renewal: bool = Field(False, description="자동 갱신 여부")

class EnhancedPackageUsageCreate(EnhancedPackageUsageBase):
    pass

class EnhancedPackageUsageUpdate(BaseModel):
    valid_until: Optional[date] = None
    status: Optional[str] = None
    auto_renewal: Optional[bool] = None

class EnhancedPackageUsage(EnhancedPackageUsageBase):
    usage_id: int
    brain_used: int
    brain_remaining: int
    pulse_used: int
    pulse_remaining: int
    lymph_used: int
    lymph_remaining: int
    red_used: int
    red_remaining: int
    ai_bike_used: int
    ai_bike_remaining: int
    low_session_alert_sent: bool
    expiry_alert_sent: bool
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

class EnhancedPackageUsageWithDetails(EnhancedPackageUsage):
    customer_name: Optional[str] = None
    package_name: Optional[str] = None

# 고객 서비스 선호도 스키마
class CustomerServicePreferenceBase(BaseModel):
    customer_id: int = Field(..., description="고객 ID")
    preferred_services: Optional[Dict[str, Any]] = Field(None, description="선호 서비스")
    preferred_time_slots: Optional[Dict[str, Any]] = Field(None, description="선호 시간대")
    preferred_intensity: Optional[str] = Field(None, description="선호 강도")
    average_visit_interval: Optional[int] = Field(None, description="평균 재방문 간격(일)")
    preferred_session_duration: Optional[int] = Field(None, description="선호 세션 시간(분)")
    health_goals: Optional[Dict[str, Any]] = Field(None, description="건강 개선 목표")
    target_completion_date: Optional[date] = Field(None, description="목표 달성 예정일")

class CustomerServicePreferenceCreate(CustomerServicePreferenceBase):
    pass

class CustomerServicePreferenceUpdate(BaseModel):
    preferred_services: Optional[Dict[str, Any]] = None
    preferred_time_slots: Optional[Dict[str, Any]] = None
    preferred_intensity: Optional[str] = None
    average_visit_interval: Optional[int] = None
    preferred_session_duration: Optional[int] = None
    health_goals: Optional[Dict[str, Any]] = None
    target_completion_date: Optional[date] = None

class CustomerServicePreference(CustomerServicePreferenceBase):
    preference_id: int
    service_effectiveness_scores: Optional[Dict[str, Any]] = None
    last_recommendation_date: Optional[date] = None
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

# 장비 관리 스키마
class EquipmentManagementBase(BaseModel):
    equipment_name: str = Field(..., description="장비명")
    equipment_code: str = Field(..., description="장비 코드")
    equipment_type: str = Field(..., description="장비 타입")
    supported_services: Optional[Dict[str, Any]] = Field(None, description="지원 서비스")
    is_available: bool = Field(True, description="사용 가능 여부")
    maintenance_due_date: Optional[date] = Field(None, description="정비 예정일")

class EquipmentManagementCreate(EquipmentManagementBase):
    pass

class EquipmentManagementUpdate(BaseModel):
    equipment_name: Optional[str] = None
    equipment_type: Optional[str] = None
    supported_services: Optional[Dict[str, Any]] = None
    is_available: Optional[bool] = None
    is_maintenance: Optional[bool] = None
    maintenance_due_date: Optional[date] = None
    last_maintenance_date: Optional[date] = None

class EquipmentManagement(EquipmentManagementBase):
    equipment_id: int
    is_maintenance: bool
    current_session_id: Optional[int] = None
    total_usage_hours: Decimal
    last_maintenance_date: Optional[date] = None
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True

# 통계 및 대시보드 스키마
class ServiceUsageStats(BaseModel):
    service_name: str
    total_sessions: int
    total_duration: int
    average_duration: float
    usage_rate: float

class CustomerSessionSummary(BaseModel):
    customer_id: int
    customer_name: str
    total_sessions: int
    remaining_sessions: Dict[str, int]
    last_visit_date: Optional[date]
    next_recommended_visit: Optional[date]

class RealtimeSessionDashboard(BaseModel):
    current_sessions: List[ServiceSessionWithDetails]
    available_equipment: List[EquipmentManagement]
    upcoming_reservations: List[Dict[str, Any]]
    session_alerts: List[Dict[str, Any]]

# 응답 스키마
class EnhancedServiceTypeListResponse(BaseModel):
    service_types: List[EnhancedServiceType]
    total: int

class ServiceSessionListResponse(BaseModel):
    sessions: List[ServiceSessionWithDetails]
    total: int
    page: int
    page_size: int

class EnhancedPackageUsageListResponse(BaseModel):
    package_usages: List[EnhancedPackageUsageWithDetails]
    total: int
    page: int
    page_size: int