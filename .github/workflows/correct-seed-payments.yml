name: üöÄ Correct Seed Payments

on:
  workflow_dispatch:

jobs:
  seed:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install Dependencies
        run: pip install psycopg2-binary
          
      - name: Seed Payments with Correct Enum
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          python - << 'EOF'
          import csv
          import psycopg2
          import os
          
          # Í≤∞Ï†ú Î∞©Î≤ï Î≥ÄÌôò
          def convert_method(m):
              return {"Ïπ¥Îìú": "card", "Ïù¥Ï≤¥": "transfer", "ÌòÑÍ∏à": "cash"}.get(m, "card")
          
          # DB Ïó∞Í≤∞
          conn = psycopg2.connect(os.environ['DATABASE_URL'])
          cursor = conn.cursor()
          
          # ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
          cursor.execute("SELECT COUNT(*) FROM payments")
          before = cursor.fetchone()[0]
          print(f"üîç ÌòÑÏû¨ Í≤∞Ï†ú Îç∞Ïù¥ÌÑ∞: {before}Í±¥")
          
          # CSV ÏùΩÍ≥† ÏÇΩÏûÖ
          with open('backend/seed/payments_real.csv', 'r', encoding='utf-8') as f:
              reader = csv.DictReader(f)
              success = 0
              failed = 0
              
              for row in reader:
                  try:
                      # payment_typeÏùÑ 'single' (Îã®Ïùº Í≤∞Ï†ú)Î°ú ÏÑ§Ï†ï
                      cursor.execute("""
                          INSERT INTO payments (
                              customer_id, payment_date, amount, 
                              payment_method, payment_type, payment_status, 
                              created_at
                          )
                          VALUES (%s, %s, %s, %s, %s, %s, %s)
                      """, (
                          int(row['customer_id']),
                          row['payment_date'],
                          int(float(row['amount'])),  # amountÍ∞Ä integer ÌÉÄÏûÖ
                          convert_method(row['payment_method']),
                          'single',  # Ïò¨Î∞îÎ•∏ enum Í∞í
                          'completed',
                          row['created_at']
                      ))
                      success += 1
                      
                      if success % 50 == 0:
                          conn.commit()
                          print(f"‚úÖ ÏßÑÌñâ: {success}Í±¥ ÏÇΩÏûÖ")
                          
                  except Exception as e:
                      failed += 1
                      print(f"‚ùå Ïò§Î•ò (Ìñâ {reader.line_num}): {e}")
                      conn.rollback()
                      continue
              
              # ÏµúÏ¢Ö Ïª§Î∞ã
              conn.commit()
              
              # ÏµúÏ¢Ö ÌôïÏù∏
              cursor.execute("SELECT COUNT(*) FROM payments")
              after = cursor.fetchone()[0]
              
              print(f"\nüéâ ÏôÑÎ£å!")
              print(f"  - ÏÑ±Í≥µ: {success}Í±¥")
              print(f"  - Ïã§Ìå®: {failed}Í±¥")
              print(f"  - Ï¥ù Í≤∞Ï†ú Îç∞Ïù¥ÌÑ∞: {before}Í±¥ ‚Üí {after}Í±¥ (Ï∂îÍ∞Ä: {after-before}Í±¥)")
              
              # ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÌëúÏãú
              if after > 0:
                  cursor.execute("""
                      SELECT payment_id, customer_id, payment_date, amount 
                      FROM payments 
                      ORDER BY payment_id DESC 
                      LIMIT 3
                  """)
                  print(f"\nüìã ÏµúÍ∑º Îç∞Ïù¥ÌÑ∞:")
                  for row in cursor.fetchall():
                      print(f"  - ID:{row[0]} | Í≥†Í∞ù:{row[1]} | {row[2]} | ‚Ç©{row[3]:,}")
              
              cursor.close()
              conn.close()
          EOF