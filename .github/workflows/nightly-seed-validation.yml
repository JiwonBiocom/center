name: Nightly Seed Validation

on:
  schedule:
    # 매일 새벽 2시 (KST 기준)
    - cron: '0 17 * * *'  # UTC 17:00 = KST 02:00
  
  # 수동 실행도 가능
  workflow_dispatch:

jobs:
  validate-seed-data:
    name: Validate Production Data
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          pip install psycopg2-binary
      
      - name: Check critical tables
        id: check-data
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cat > check_tables.py <<'EOF'
          import psycopg2
          from urllib.parse import urlparse
          import os
          import json
          
          url = urlparse(os.environ['DATABASE_URL'])
          conn = psycopg2.connect(
              host=url.hostname,
              port=url.port,
              database=url.path[1:],
              user=url.username,
              password=url.password,
              sslmode='require'
          )
          cur = conn.cursor()
          
          # 검증할 테이블과 최소 레코드 수
          critical_tables = {
              'customers': 100,        # 최소 100명 이상
              'payments': 50,          # 최소 50건 이상
              'packages': 5,           # 최소 5개 이상
              'marketing_leads': 10,   # 최소 10건 이상
              'kit_receipts': 5,       # 최소 5건 이상
              'service_types': 5       # 최소 5개 이상
          }
          
          results = {}
          has_issues = False
          
          for table, min_count in critical_tables.items():
              try:
                  cur.execute(f'SELECT COUNT(*) FROM {table}')
                  count = cur.fetchone()[0]
                  
                  if count < min_count:
                      results[table] = {
                          'status': 'WARNING',
                          'count': count,
                          'min_required': min_count,
                          'message': f'{table} has only {count} records (minimum: {min_count})'
                      }
                      has_issues = True
                  else:
                      results[table] = {
                          'status': 'OK',
                          'count': count,
                          'min_required': min_count
                      }
              except Exception as e:
                  results[table] = {
                      'status': 'ERROR',
                      'message': str(e)
                  }
                  has_issues = True
          
          # 결과 출력
          print('📊 프로덕션 데이터 검증 결과:')
          print('=' * 60)
          
          for table, result in results.items():
              status_icon = '✅' if result['status'] == 'OK' else '⚠️' if result['status'] == 'WARNING' else '❌'
              print(f"{status_icon} {table}: {result.get('count', 'N/A')} 레코드")
              if result['status'] != 'OK':
                  print(f"   → {result.get('message', '')}")
          
          # GitHub Actions 출력 변수 설정
          print(f'::set-output name=has_issues::{str(has_issues).lower()}')
          print(f'::set-output name=results::{json.dumps(results)}')
          
          cur.close()
          conn.close()
          
          # 문제가 있으면 exit code 1 반환
          if has_issues:
              exit(1)
          EOF
          
          python check_tables.py
      
      - name: Create issue if validation fails
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const title = `🚨 프로덕션 데이터 검증 실패 - ${date}`;
            
            // 기존 이슈가 있는지 확인
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'data-validation'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('프로덕션 데이터 검증 실패')
            );
            
            const body = `## 프로덕션 데이터 검증 실패
            
            매일 새벽 실행되는 데이터 검증에서 문제가 발견되었습니다.
            
            ### 검증 시간
            - ${new Date().toLocaleString('ko-KR', {timeZone: 'Asia/Seoul'})} (KST)
            
            ### 문제 내용
            일부 테이블의 데이터가 최소 요구사항을 충족하지 못했습니다.
            
            ### 조치 필요
            1. [Actions 로그](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) 확인
            2. 누락된 데이터 확인
            3. 필요시 수동 시드 실행
            
            ### 수동 시드 실행 방법
            1. [Actions 탭](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/workflows/seed-production-db.yml) 접속
            2. "Run workflow" 클릭
            3. 대상 테이블 선택 후 실행
            
            cc: @${context.actor}`;
            
            if (existingIssue) {
              // 기존 이슈에 코멘트 추가
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body
              });
            } else {
              // 새 이슈 생성
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['data-validation', 'production', 'urgent']
              });
            }
      
      - name: Notify success
        if: success()
        run: |
          echo "✅ 모든 프로덕션 데이터가 정상입니다!"
          echo "📊 검증 완료 시간: $(date '+%Y-%m-%d %H:%M:%S KST')"