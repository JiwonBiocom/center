name: Auto Fix Schema Drift

on:
  workflow_dispatch:  # 수동 트리거
  schedule:
    - cron: '0 3 * * *'  # 매일 새벽 3시에 실행 (KST 기준 정오)
  push:
    branches: [main]
    paths:
      - 'backend/models/**'
      - '.github/workflows/auto-fix-schema.yml'

jobs:
  detect-and-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install psycopg2-binary sqlalchemy python-dotenv
          cd backend && pip install -r requirements.txt

      - name: Detect Schema Drift
        id: detect
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "🔍 Detecting schema drift..."

          # 스키마 차이 감지 및 SQL 생성
          cd backend
          python ../scripts/quick_fix_schema.py > ../schema_fix.sql 2>&1

          # 차이가 있는지 확인
          if [ -s ../schema_fix.sql ] && grep -E "(ALTER TABLE|CREATE INDEX|UPDATE)" ../schema_fix.sql; then
            echo "has_drift=true" >> $GITHUB_OUTPUT
            echo "sql_file=schema_fix.sql" >> $GITHUB_OUTPUT
            # SQL 내용을 출력 변수에 저장
            echo "sql_content<<EOF" >> $GITHUB_OUTPUT
            cat ../schema_fix.sql >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_drift=false" >> $GITHUB_OUTPUT
            echo "✅ No schema drift detected - skipping PR creation"
          fi

      - name: Create Fix PR
        if: steps.detect.outputs.has_drift == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "fix: auto-generated schema drift fix"
          title: "🤖 [Auto] Fix Schema Drift"
          body: |
            ## 🔍 Schema Drift Detected

            This PR contains auto-generated SQL to fix schema differences between code and database.

            ### 📝 Generated SQL
            ```sql
            ${{ steps.detect.outputs.sql_content }}
            ```

            ### ✅ Next Steps
            1. Review the SQL changes
            2. Merge this PR
            3. The SQL will be automatically applied to production

            ### 🔒 Safety Checks
            - Only safe operations (ADD COLUMN, CREATE INDEX) are auto-generated
            - Dangerous operations (DROP, DELETE) require manual intervention

            ---
            *Generated by GitHub Actions at ${{ github.event.repository.updated_at }}*
          branch: auto/fix-schema-${{ github.run_number }}
          labels: |
            schema-drift
            auto-generated
            needs-review

      - name: Comment on PR with Apply Instructions
        if: steps.create_pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ steps.create_pr.outputs.pull-request-number }};
            const sql_content = `${{ steps.detect.outputs.sql_content }}`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: `## 🚀 Ready to Apply

              Once this PR is approved and merged, the schema fixes will be automatically applied.

              ### Manual Application (if needed)
              If you need to apply these changes immediately:

              1. Copy the SQL from this PR
              2. Go to [Supabase SQL Editor](https://app.supabase.com/project/${{ secrets.SUPABASE_PROJECT_ID }}/sql)
              3. Paste and execute

              ### Automatic Application
              After merge, the \`apply-schema-fixes\` workflow will run automatically.`
            });

  # 별도의 워크플로우로 실제 적용 (PR 머지 후)
  apply-fixes:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: detect-and-fix

    steps:
      - uses: actions/checkout@v4

      - name: Check for pending fixes
        id: check
        run: |
          if [ -f "schema_fixes/pending/*.sql" ]; then
            echo "has_pending=true" >> $GITHUB_OUTPUT
          else
            echo "has_pending=false" >> $GITHUB_OUTPUT
          fi

      - name: Apply via Supabase CLI
        if: steps.check.outputs.has_pending == 'true'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          # Supabase CLI 설치
          curl -fsSL https://raw.githubusercontent.com/supabase/cli/main/install.sh | sh

          # 프로젝트 연결
          supabase link --project-ref $SUPABASE_PROJECT_ID

          # SQL 적용
          for sql_file in schema_fixes/pending/*.sql; do
            echo "Applying $sql_file..."
            supabase db push --file $sql_file

            # 성공 시 완료 폴더로 이동
            mv $sql_file schema_fixes/completed/
          done

      - name: Notify Success
        if: steps.check.outputs.has_pending == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '✅ Schema fixes have been successfully applied to production!'
            });
