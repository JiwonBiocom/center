#!/usr/bin/env python3
"""
Supabase Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏßÅÏ†ë Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
"""
import psycopg2

# RailwayÏôÄ ÎèôÏùºÌïú DATABASE_URL
DATABASE_URL = "postgresql://postgres.wvcxzyvmwwrbjpeuyvuh:bico6819!!@aws-0-ap-northeast-2.pooler.supabase.com:6543/postgres"

def check_database():
    """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏßÅÏ†ë ÌôïÏù∏"""
    
    print("üîç Supabase Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏßÅÏ†ë Ïó∞Í≤∞ ÌÖåÏä§Ìä∏")
    print("=" * 50)
    
    try:
        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # 1. payments ÌÖåÏù¥Î∏î ÌôïÏù∏
        print("\n1Ô∏è‚É£ payments ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Ïàò:")
        cursor.execute("SELECT COUNT(*) FROM payments")
        count = cursor.fetchone()[0]
        print(f"   Ï¥ù {count}Í±¥")
        
        # 2. ÏµúÍ∑º Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
        if count > 0:
            print("\n2Ô∏è‚É£ ÏµúÍ∑º Í≤∞Ï†ú Îç∞Ïù¥ÌÑ∞ 5Í±¥:")
            cursor.execute("""
                SELECT payment_id, customer_id, payment_date, amount, payment_method 
                FROM payments 
                ORDER BY payment_id DESC 
                LIMIT 5
            """)
            
            for row in cursor.fetchall():
                print(f"   ID:{row[0]} | Í≥†Í∞ù:{row[1]} | {row[2]} | ‚Ç©{row[3]:,.0f} | {row[4]}")
        
        # 3. Ïä§ÌÇ§Îßà Ï†ïÎ≥¥
        print("\n3Ô∏è‚É£ payments ÌÖåÏù¥Î∏î Ïª¨Îüº:")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'payments'
            ORDER BY ordinal_position
        """)
        
        for col in cursor.fetchall():
            print(f"   - {col[0]}: {col[1]} (nullable: {col[2]})")
        
        # 4. payment_type enum ÌôïÏù∏
        print("\n4Ô∏è‚É£ payment_type enum Í∞í:")
        cursor.execute("""
            SELECT enumlabel 
            FROM pg_enum 
            WHERE enumtypid = (
                SELECT oid FROM pg_type WHERE typname = 'payment_type'
            )
        """)
        
        enums = cursor.fetchall()
        if enums:
            for enum in enums:
                print(f"   - {enum[0]}")
        else:
            print("   payment_type enumÏù¥ ÏóÜÏäµÎãàÎã§")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Ïò§Î•ò: {e}")

if __name__ == "__main__":
    check_database()