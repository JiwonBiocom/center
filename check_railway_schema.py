#!/usr/bin/env python3
"""Railway Î∞∞Ìè¨ ÌôòÍ≤ΩÏùò Ïä§ÌÇ§Îßà Î¨∏Ï†ú Ï†êÍ≤Ä Ïä§ÌÅ¨Î¶ΩÌä∏"""

import os
import sys
from datetime import datetime
from dotenv import load_dotenv
from sqlalchemy import create_engine, inspect, text

# .env ÌååÏùº Î°úÎìú
load_dotenv()

# ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú DB URL Í∞ÄÏ†∏Ïò§Í∏∞
DATABASE_URL = os.getenv('DATABASE_URL')
if not DATABASE_URL:
    print("ERROR: DATABASE_URL not found in environment variables")
    sys.exit(1)

print(f"Checking database schema at: {datetime.now()}")
print("=" * 60)

try:
    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞
    engine = create_engine(DATABASE_URL)
    inspector = inspect(engine)
    
    # Î™®Îì† ÌÖåÏù¥Î∏î Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    tables = inspector.get_table_names()
    print(f"\nTotal tables found: {len(tables)}")
    
    # Railway Î°úÍ∑∏ÏóêÏÑú Ïñ∏Í∏âÎêú Î¨∏Ï†úÎì§ Ï≤¥ÌÅ¨
    issues = []
    
    # 1. notifications ÌÖåÏù¥Î∏îÏùò user_id Ïª¨Îüº Ï≤¥ÌÅ¨
    if 'notifications' in tables:
        columns = {col['name']: col for col in inspector.get_columns('notifications')}
        if 'user_id' not in columns:
            issues.append("‚ùå notifications table missing 'user_id' column")
        else:
            print("‚úÖ notifications table has 'user_id' column")
    else:
        issues.append("‚ùå notifications table not found")
    
    # 2. packages ÌÖåÏù¥Î∏îÏùò price/base_price Ïª¨Îüº Ï≤¥ÌÅ¨
    if 'packages' in tables:
        columns = {col['name']: col for col in inspector.get_columns('packages')}
        if 'price' in columns:
            issues.append("‚ùå packages table still has 'price' column (should be 'base_price')")
        if 'base_price' not in columns:
            issues.append("‚ùå packages table missing 'base_price' column")
        else:
            print("‚úÖ packages table has 'base_price' column")
    else:
        issues.append("‚ùå packages table not found")
    
    # 3. customer_payments ÌÖåÏù¥Î∏î Ï≤¥ÌÅ¨ (Railway Î°úÍ∑∏ÏóêÏÑú Ïñ∏Í∏âÎê®)
    if 'customer_payments' in tables:
        print("‚ö†Ô∏è  customer_payments table exists (might be legacy)")
        columns = inspector.get_columns('customer_payments')
        print(f"   Columns: {[col['name'] for col in columns]}")
    
    # 4. payments ÌÖåÏù¥Î∏î Ï≤¥ÌÅ¨
    if 'payments' in tables:
        columns = {col['name']: col for col in inspector.get_columns('payments')}
        print("‚úÖ payments table exists")
        required_columns = ['payment_id', 'customer_id', 'payment_date', 'amount']
        for col in required_columns:
            if col not in columns:
                issues.append(f"‚ùå payments table missing '{col}' column")
    else:
        issues.append("‚ùå payments table not found")
    
    # 5. Í∏∞ÌÉÄ Railway Î°úÍ∑∏ÏóêÏÑú Ïñ∏Í∏âÎêú ÌÖåÏù¥Î∏îÎì§ Ï≤¥ÌÅ¨
    critical_tables = ['customers', 'services', 'service_usages', 'packages', 'package_purchases']
    for table in critical_tables:
        if table not in tables:
            issues.append(f"‚ùå {table} table not found")
        else:
            print(f"‚úÖ {table} table exists")
    
    # Í≤∞Í≥º Ï∂úÎ†•
    print("\n" + "=" * 60)
    if issues:
        print("üö® ISSUES FOUND:")
        for issue in issues:
            print(f"  {issue}")
    else:
        print("‚úÖ No schema issues found!")
    
    # SQL Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
    if issues:
        print("\n" + "=" * 60)
        print("üìù GENERATING FIX SQL...")
        
        fix_sql = []
        fix_sql.append("-- Railway Schema Fix SQL")
        fix_sql.append(f"-- Generated at: {datetime.now().isoformat()}")
        fix_sql.append("-- Run this in Supabase SQL Editor\n")
        
        # notifications user_id ÏàòÏ†ï
        if any("notifications" in issue and "user_id" in issue for issue in issues):
            fix_sql.append("-- Fix notifications table")
            fix_sql.append("ALTER TABLE notifications ADD COLUMN IF NOT EXISTS user_id INTEGER;")
            fix_sql.append("UPDATE notifications SET user_id = 1 WHERE user_id IS NULL;")
            fix_sql.append("CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id);\n")
        
        # packages price -> base_price ÏàòÏ†ï
        if any("packages" in issue and ("price" in issue or "base_price" in issue) for issue in issues):
            fix_sql.append("-- Fix packages table")
            fix_sql.append("ALTER TABLE packages RENAME COLUMN price TO base_price;")
            fix_sql.append("-- If above fails because column already renamed, ignore the error\n")
        
        # customer_payments Í¥ÄÎ†® Ï≤òÎ¶¨
        if 'customer_payments' in tables:
            fix_sql.append("-- Handle legacy customer_payments table")
            fix_sql.append("-- Check if this table is still needed or can be dropped")
            fix_sql.append("-- SELECT COUNT(*) FROM customer_payments;\n")
        
        # ÌååÏùºÎ°ú Ï†ÄÏû•
        fix_filename = f"railway_schema_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}.sql"
        with open(fix_filename, 'w') as f:
            f.write('\n'.join(fix_sql))
        
        print(f"‚úÖ Fix SQL saved to: {fix_filename}")
        print("\nSQL Preview:")
        print("-" * 40)
        print('\n'.join(fix_sql[:10]))  # Ï≤òÏùå 10Ï§ÑÎßå ÎØ∏Î¶¨Î≥¥Í∏∞
        if len(fix_sql) > 10:
            print("... (more lines)")
    
except Exception as e:
    print(f"‚ùå Error: {e}")
    import traceback
    traceback.print_exc()